package com.glycin.ragvillage.ai

import com.glycin.ragvillage.ai.configuration.OllamaServiceConfiguration
import com.glycin.ragvillage.model.VillagerCommand
import dev.langchain4j.memory.chat.MessageWindowChatMemory
import dev.langchain4j.model.ollama.OllamaChatModel
import dev.langchain4j.service.AiServices
import dev.langchain4j.service.UserMessage
import org.springframework.stereotype.Service

@Service
class JudgeService(
    private val config: OllamaServiceConfiguration,
){
    lateinit var commandJudgment: CommandJudge
    lateinit var questionJudgment: QuestionJudge
    fun initJudgement(villagers: List<String>, locations: Set<String>) {

        commandJudgment = AiServices.builder(CommandJudge::class.java)
            .chatLanguageModel(
                OllamaChatModel.builder()
                    .logRequests(config.logRequests)
                    .logResponses(config.logResponses)
                    .baseUrl(config.url)
                    .modelName(config.modelName)
                    .temperature(config.temperature)
                    .build()
            )
            .chatMemoryProvider {
                MessageWindowChatMemory.withMaxMessages(2) // TODO: DO NOT SET THIS TO 1, IT WILL REMOVE THE USER MESSAGE IF U ALSO HAVE A SYSTEM MESSAGE
            }.systemMessageProvider {
                """
                You are a validation agent tasked with verifying the responses generated by a primary agent for a role-playing game set in Little Minas Morgul. 
                Your role is to extract structured data from the input you receive.
                                
                Your output must STRICTLY (I MEAN IT!) ADHERE TO THE FOLLOWING JSON FORMAT
                
                {
                  "moveTo": "string or null",
                  "talkTo": "string or null",
                  "wait": "boolean"
                }
                """.trimIndent()
            }
            .build()

        questionJudgment = AiServices.builder(QuestionJudge::class.java)
            .chatLanguageModel(
                OllamaChatModel.builder()
                    .logRequests(config.logRequests)
                    .logResponses(config.logResponses)
                    .baseUrl(config.url)
                    .modelName(config.modelName)
                    .temperature(config.temperature)
                    .build()
            )
            .chatMemoryProvider {
                MessageWindowChatMemory.withMaxMessages(2) // TODO: DO NOT SET THIS TO 1, IT WILL REMOVE THE USER MESSAGE IF U ALSO HAVE A SYSTEM MESSAGE
            }.systemMessageProvider {
                """
                You are tasked to analyze the message you receive and extract the type of question from it.
                Use one of the following question types: ${QuestionType.entries.joinToString()}.
                Return ONLY the question type and nothing else. Do not wrap your response in quotes or in json.
                """.trimIndent()
            }
            .build()
    }
}


interface CommandJudge {
    fun judgeCommand (@UserMessage messageToBeJudge: String) : VillagerCommand
}

interface QuestionJudge{
    fun judgeQuestion(@UserMessage messageToBeJudge: String) : String
}
